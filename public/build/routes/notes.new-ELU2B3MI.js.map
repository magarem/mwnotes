{
  "version": 3,
  "sources": ["../../../app/routes/notes.new.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { useSubmit, Form } from \"react-router-dom\";\nimport { createNote, getFolderListItems, getNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\n\nimport { useState } from \"react\";\nimport { createClient } from '@supabase/supabase-js'\nimport { v4 as uuidv4 } from \"uuid\";\n// import { Col, Card, Button, Row } from \"react-bootstrap\";\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport invariant from \"tiny-invariant\";\n// import Row from \"react-bootstrap/esm/Row\";\n// import { Col, Card } from \"react-bootstrap\";\nconst CDNURL = \"https://lpbqbqcmlspixeiikhcb.supabase.co/storage/v1/object/public/files/\";\nexport const supabase = createClient('https://lpbqbqcmlspixeiikhcb.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxwYnFicWNtbHNwaXhlaWlraGNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODA2NDU1ODksImV4cCI6MTk5NjIyMTU4OX0.EIGOPYgY4iebJJ1jpJNCoioJZSE9XU83ZPWUhCsgUSk')\n\n\nexport async function loader({ request, params }: LoaderArgs) {\n  \n  const env = {\n    SUPABASE_URL_RAW: process.env.SUPABASE_URL_RAW!,\n    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY!,\n  }\n  \n  const userId = await requireUserId(request);\n  // invariant(params.noteId, \"noteId not found\");\n\n  // const folders = await getFolderListItems({ userId });\n  \n  // console.log('folders:', folders);\n\n  return json({ env });\n}\n\n\nexport async function action({ request }: ActionArgs) {\n\n  const userId = await requireUserId(request);\n  const formData = await request.formData();\n  // const folder = formData.get(\"folder\");\n  const title = formData.get(\"title\");\n  const body = formData.get(\"body\");\n  const tags = formData.get(\"tags\");\n  const image = formData.get(\"image\");\n  console.log(title, body, image);\n  \n  if (typeof title !== \"string\" || title.length === 0) {\n    return json(\n      { errors: { title: \"Title is required\", body: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof body !== \"string\" || body.length === 0) {\n    return json(\n      { errors: { title: null, body: \"Body is required\" } },\n      { status: 400 }\n    );\n  }\n  // img = \"https://lpbqbqcmlspixeiikhcb.supabase.co/storage/v1/object/public/files/\" + image\n  const note = await createNote({ title, body, img:image, tags, userId });\n\n  return redirect(`/notes/${note.id}`);\n}\n\nexport default function NewNotePage() {\n  const data = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const titleRef = React.useRef<HTMLTextAreaElement>(null);\n  const bodyRef = React.useRef<HTMLTextAreaElement>(null);\n  const tagsRef = React.useRef<HTMLTextAreaElement>(null);\n  const imageRef = React.useRef<HTMLTextAreaElement>(null);\n  const [file, setfile] = useState([]);\n  const [filesData, setFilesData] = useState([]);\n  const [db_fileName, db_setFileName] = useState([]);\n  const submit = useSubmit();\n\n\n  // console.log('data:', data.folders);\n  \n  React.useEffect(() => {\n    if (actionData?.errors?.title) {\n      titleRef.current?.focus();\n    } else if (actionData?.errors?.body) {\n      bodyRef.current?.focus();\n    }\n  }, [actionData]);\n\n\n  const folderNew = async () => {\n    try {\n      const config = {\n          method: 'POST',\n          headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data)\n      }\n      const response = await fetch('url', config)\n      //const json = await response.json()\n      if (response.ok) {\n          //return json\n          return response\n      } else {\n          //\n      }\n  } catch (error) {\n          //\n  }\n  }\n\n  return (\n    <div>\n      <Form\n        name=\"form1\"\n        method=\"post\"\n        // onSubmit={handleSubmit}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8,\n          width: \"100%\",\n        }}\n      >\n        <div>\n          {/* <label className=\"flex w-full flex-col gap-1  text-gray-50\"> */}\n            {/* <label htmlFor=\"folder\" className=\"flex w-full flex-col gap-1  text-gray-50\">Pasta\n            <select id=\"folder\" name=\"folder\" className=\"w-full flex-1 rounded-md border-0 text-gray-50 bg-slate-700 border-slate-800 px-2 py-2 !outline-none text-lg leading-6\">\n             {data.folders.map((item: any)=>\n              <option key={item.id} value={item.id}>{item.name}</option>\n             )}\n            </select>\n            </label> */}\n            <label htmlFor=\"title\" className=\"flex w-full flex-col gap-1  text-gray-50\">Titulo: \n            <input\n              autoFocus\n              ref={titleRef}\n              id=\"title\"\n              name=\"title\"\n              className=\"w-full flex-1 rounded-md border-0 text-gray-50 bg-slate-700 border-slate-800 px-2 py-2 !outline-none text-lg leading-6\"\n              aria-invalid={actionData?.errors?.title ? true : undefined}\n              aria-errormessage={\n                actionData?.errors?.title ? \"title-error\" : undefined\n              }\n            />\n          </label>\n        </div>\n        <div>\n          <label className=\"flex w-full flex-col gap-1  text-gray-50\">\n            <span>Texto: </span>\n            <textarea\n              ref={bodyRef}\n              name=\"body\"\n              rows={8}\n              className=\"w-full flex-1 rounded-md border-0 text-gray-50 bg-slate-700 border-slate-800 px-2 py-2 !outline-none text-lg leading-6\"\n              aria-invalid={actionData?.errors?.body ? true : undefined}\n              aria-errormessage={\n                actionData?.errors?.body ? \"body-error\" : undefined\n              }\n            />\n          </label>\n         \n        </div>\n        <div>\n        <label htmlFor=\"tags\" className=\"flex w-full flex-col gap-1  text-gray-50\">Marcadores: \n            <input\n              autoFocus\n              ref={tagsRef}\n              id=\"tags\"\n              name=\"tags\"\n              className=\"w-full flex-1 rounded-md border-0 text-gray-50 bg-slate-700 border-slate-800 px-2 py-2 !outline-none text-lg leading-6\"\n              aria-invalid={actionData?.errors?.title ? true : undefined}\n              aria-errormessage={\n                actionData?.errors?.title ? \"title-error\" : undefined\n              }\n            />\n          </label>\n        </div>\n        <div>\n        <label className=\"flex w-full flex-col gap-1  text-gray-50\">\n          <span>Imagem: </span>\n          <input\n            ref={imageRef}\n            name=\"image\"\n            className=\"w-full flex-1 rounded-md border-0 text-gray-50 bg-slate-700 border-slate-800 px-2 py-2 !outline-none text-lg leading-6\"\n          />\n        </label>\n      </div>\n\n        {/* <div>\n          <label className=\"flex w-full flex-col gap-1\">\n            <span>Img: </span>\n            <input type=\"file\" name=\"image\" onChange={handleFileSelected} />\n          </label>\n        </div> */}\n\n        <div className=\"text-left mt-3\">\n          <button\n            type=\"submit\"\n            className=\"rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Salvar\n          </button>\n          \n        </div>\n      \n      </Form>\n      {/* <div style={{width: '80%', margin: 'auto', marginTop: '100px'}}>\n            <Row xs={1} md={4} className=\"g-4\">\n              {filesData.filter((x)=>!x.name.includes('undefined')).map((image) => {\n                return (\n                  <Col key={CDNURL + \"/\" + image.name}>\n                    <Card >\n                      <Card.Img variant=\"top\" src={CDNURL + \"/\" + image.name} />\n                      <Card.Body>\n                        <Button key={CDNURL + \"/\" + image.name} variant=\"danger\" onClick={() => deleteImage(image.name)}>Delete Image</Button>\n                       </Card.Body>\n                    </Card>\n                  </Col>\n                )\n              })}\n            </Row>\n            \n        </div> */}\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "_a", "_b", "_c", "_d"]
}
