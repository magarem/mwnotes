{
  "version": 3,
  "sources": ["../../../app/routes/folderNew.tsx"],
  "sourcesContent": ["import { ActionArgs, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { folderCreate } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\n\nimport { useState } from \"react\";\nimport { createClient } from '@supabase/supabase-js'\nimport { v4 as uuidv4 } from \"uuid\";\n// import { Col, Card, Button, Row } from \"react-bootstrap\";\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col, Card } from \"react-bootstrap\";\n// import Row from \"react-bootstrap/esm/Row\";\n// import { Col, Card } from \"react-bootstrap\";\nconst CDNURL = \"https://lpbqbqcmlspixeiikhcb.supabase.co/storage/v1/object/public/files/\";\nexport const supabase = createClient('https://lpbqbqcmlspixeiikhcb.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxwYnFicWNtbHNwaXhlaWlraGNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODA2NDU1ODksImV4cCI6MTk5NjIyMTU4OX0.EIGOPYgY4iebJJ1jpJNCoioJZSE9XU83ZPWUhCsgUSk')\n\n\nexport async function action({ request }: ActionArgs) {\n  \n  const userId = await requireUserId(request);\n  const formData = await request.formData();\n  const folderName = formData.get(\"folderName\");\n  console.log('folderName:', folderName);\n  const ret = await folderCreate({ folderName, userId});\n  console.log('ret:', ret);\n  return redirect(`/notes`);\n}\n\nexport default function NewNotePage() {\n\n//   const actionData = useActionData<typeof action>();\n  const folderNameRef = React.useRef<HTMLTextAreaElement>(null);\n\n//   React.useEffect(() => {\n//     if (actionData?.errors?.title) {\n//       titleRef.current?.focus();\n//     } else if (actionData?.errors?.body) {\n//       bodyRef.current?.focus();\n//     }\n//   }, [actionData]);\n\n\n  const folderNew = async () => {\n    try {\n      const config = {\n          method: 'POST',\n          headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data)\n      }\n      const response = await fetch('url', config)\n      //const json = await response.json()\n      if (response.ok) {\n          //return json\n          return response\n      } else {\n          //\n      }\n  } catch (error) {\n          //\n  }\n  }\n\n  return (\n    <div className=\"p-10\">\n      <Form\n        name=\"form1\"\n        method=\"post\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8,\n          width: \"100%\",\n        }}\n      >\n        <div>\n          <h2 className=\"text-gray-50\">Nova pasta</h2>\n          <label className=\"flex w-full flex-col gap-1  text-gray-50\">\n            <span>Nome: </span>\n            <input\n              autoFocus\n              ref={folderNameRef}\n              id=\"folderName\"\n              name=\"folderName\"\n              className=\"w-full flex-1 rounded-md border-0 text-gray-50 bg-slate-700 border-slate-800 px-2 py-2 !outline-none text-lg leading-6\"\n            />\n          </label>\n        </div>\n        <div className=\"text-left mt-3\">\n         \n          <button\n            type=\"submit\"\n            className=\"rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Salvar\n          </button>{' '}\n          <Link to=\"/notes\" >Cencelar</Link>\n        </div>\n      </Form>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAEA,YAAuB;AAEvB,kBAA6B;AAC7B,qBAA8B;AA4EpB;AAhEH,IAAM,WAAW,aAAa,4CAA4C,kNAAkN;AAcpR,SAAR,cAA+B;AAGpC,QAAM,gBAAsB,aAA4B,IAAI;AAW5D,QAAM,YAAY,YAAY;AAC5B,QAAI;AACF,YAAM,SAAS;AAAA,QACX,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,UAAU;AAAA,UACV,gBAAgB;AAAA,QACpB;AAAA,QACA,MAAM,KAAK,UAAU,IAAI;AAAA,MAC7B;AACA,YAAM,WAAW,MAAM,MAAM,OAAO,MAAM;AAE1C,UAAI,SAAS,IAAI;AAEb,eAAO;AAAA,MACX,OAAO;AAAA,MAEP;AAAA,IACJ,SAAS,OAAP;AAAA,IAEF;AAAA,EACA;AAEA,SACE,mDAAC,SAAI,WAAU,QACb;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL,QAAO;AAAA,MACP,OAAO;AAAA,QACL,SAAS;AAAA,QACT,eAAe;AAAA,QACf,KAAK;AAAA,QACL,OAAO;AAAA,MACT;AAAA,MAEA;AAAA,2DAAC,SACC;AAAA,6DAAC,QAAG,WAAU,gBAAe,0BAA7B;AAAA;AAAA;AAAA;AAAA,iBAAuC;AAAA,UACvC,mDAAC,WAAM,WAAU,4CACf;AAAA,+DAAC,UAAK,sBAAN;AAAA;AAAA;AAAA;AAAA,mBAAY;AAAA,YACZ;AAAA,cAAC;AAAA;AAAA,gBACC,WAAS;AAAA,gBACT,KAAK;AAAA,gBACL,IAAG;AAAA,gBACH,MAAK;AAAA,gBACL,WAAU;AAAA;AAAA,cALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMA;AAAA,eARF;AAAA;AAAA;AAAA;AAAA,iBASA;AAAA,aAXF;AAAA;AAAA;AAAA;AAAA,eAYA;AAAA,QACA,mDAAC,SAAI,WAAU,kBAEb;AAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,WAAU;AAAA,cACX;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA;AAAA,UAAU;AAAA,UACV,mDAAC,QAAK,IAAG,UAAU,wBAAnB;AAAA;AAAA;AAAA;AAAA,iBAA2B;AAAA,aAR7B;AAAA;AAAA;AAAA;AAAA,eASA;AAAA;AAAA;AAAA,IAhCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,KAlCF;AAAA;AAAA;AAAA;AAAA,SAmCA;AAEJ;",
  "names": []
}
