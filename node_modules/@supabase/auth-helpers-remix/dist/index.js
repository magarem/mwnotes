"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createBrowserClient: () => createBrowserClient,
  createServerClient: () => createServerClient,
  logger: () => log_default
});
module.exports = __toCommonJS(src_exports);

// src/utils/createSupabaseClient.ts
var import_auth_helpers_shared = require("@supabase/auth-helpers-shared");
function createBrowserClient(supabaseUrl, supabaseKey, {
  options,
  cookieOptions
} = {}) {
  var _a;
  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      "supabaseUrl and supabaseKey are required to create a Supabase client! Find these under `Settings` > `API` in your Supabase dashboard."
    );
  }
  return (0, import_auth_helpers_shared.createBrowserSupabaseClient)({
    supabaseUrl,
    supabaseKey,
    options: {
      ...options,
      global: {
        ...options == null ? void 0 : options.global,
        headers: {
          ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
          "X-Client-Info": `${"@supabase/auth-helpers-remix"}@${"0.1.9"}`
        }
      }
    },
    cookieOptions
  });
}
function createServerClient(supabaseUrl, supabaseKey, {
  request,
  response,
  options,
  cookieOptions
}) {
  var _a;
  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      "supabaseUrl and supabaseKey are required to create a Supabase client! Find these under `Settings` > `API` in your Supabase dashboard."
    );
  }
  if (!request || !response) {
    throw new Error(
      "request and response must be passed to createSupabaseClient function, when called from loader or action"
    );
  }
  return (0, import_auth_helpers_shared.createServerSupabaseClient)({
    supabaseUrl,
    supabaseKey,
    getRequestHeader: (key) => {
      return request.headers.get(key) ?? void 0;
    },
    getCookie: (name) => {
      var _a2;
      return (0, import_auth_helpers_shared.parseCookies)(((_a2 = request == null ? void 0 : request.headers) == null ? void 0 : _a2.get("Cookie")) ?? "")[name];
    },
    setCookie(name, value, options2) {
      const cookieStr = (0, import_auth_helpers_shared.serializeCookie)(name, value, {
        ...options2,
        httpOnly: false
      });
      response.headers.set("set-cookie", cookieStr);
    },
    options: {
      ...options,
      global: {
        ...options == null ? void 0 : options.global,
        headers: {
          ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
          "X-Client-Info": `${"@supabase/auth-helpers-remix"}@${"0.1.9"}`
        }
      }
    },
    cookieOptions
  });
}

// src/utils/log.ts
var dev = process.env.NODE_ENV !== "production";
var logger = {
  log: (message, ...optionalParams) => {
    dev ? console.log(message, ...optionalParams) : null;
  },
  error: (message, ...optionalParams) => {
    console.error(message, ...optionalParams);
  },
  info: (message, ...optionalParams) => {
    logger.log(message, ...optionalParams);
  },
  debug: (message, ...optionalParams) => {
    logger.log(message, ...optionalParams);
  },
  warn: (message, ...optionalParams) => {
    dev ? logger.error(message, ...optionalParams) : null;
  }
};
var log_default = logger;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createBrowserClient,
  createServerClient,
  logger
});
//# sourceMappingURL=index.js.map