{"version":3,"sources":["../src/index.ts","../src/utils/createSupabaseClient.ts","../src/utils/log.ts"],"sourcesContent":["// Methods\nexport {\n  createBrowserClient,\n  createServerClient\n} from './utils/createSupabaseClient';\nexport { default as logger } from './utils/log';\n\n// Types\nexport type { Session, User, SupabaseClient } from '@supabase/supabase-js';\n","import {\n  CookieOptions,\n  createServerSupabaseClient,\n  parseCookies,\n  serializeCookie,\n  createBrowserSupabaseClient,\n  SupabaseClientOptionsWithoutAuth\n} from '@supabase/auth-helpers-shared';\nimport { SupabaseClient } from '@supabase/supabase-js';\n\n/**\n * ## Authenticated Supabase client\n * ### Loader\n *\n * ```ts\n * import { createServerClient } from '@supabase/auth-helpers-remix';\n *\n * export const loader = async ({ request }: { request: Request }) => {\n *   const response = new Response();\n *\n *   const supabaseClient = createServerClient(\n *     process.env.SUPABASE_URL,\n *     process.env.SUPABASE_ANON_KEY,\n *     { request, response }\n *   );\n *\n *   const { data } = await supabaseClient.from('test').select('*');\n *\n *   return json(\n *    { data },\n *    { headers: response.headers }\n *   );\n * };\n * ```\n *\n * ### Action\n *\n * ```ts\n * import { createServerClient } from '@supabase/auth-helpers-remix';\n *\n * export const action = async ({ request }: { request: Request }) => {\n *   const response = new Response();\n *\n *   const supabaseClient = createServerClient(\n *     process.env.SUPABASE_URL,\n *     process.env.SUPABASE_ANON_KEY,\n *     { request, response }\n *   );\n *\n *   const { data } = await supabaseClient.from('test').select('*');\n *\n *   return json(\n *    { data },\n *    { headers: response.headers }\n *   );\n * };\n * ```\n *\n * ### Component\n *\n * ```ts\n * import { createBrowserClient } from '@supabase/auth-helpers-remix';\n *\n * useEffect(() => {\n *   const supabaseClient = createBrowserClient(\n *     window.env.SUPABASE_URL,\n *     window.env.SUPABASE_ANON_KEY\n *   );\n *\n *   const getData = async () => {\n *     const { data: supabaseData } = await supabaseClient\n *       .from('test')\n *       .select('*');\n *\n *     console.log({ data });\n *   };\n *\n *   getData();\n * }, []);\n * ```\n *\n * Note: window.env is not automatically populated by Remix\n * Check out the [example app](../../../../examples/remix/app/root.tsx) or\n * [Remix docs](https://remix.run/docs/en/v1/guides/envvars#browser-environment-variables) for more info\n */\n\nexport function createBrowserClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>(\n  supabaseUrl: string,\n  supabaseKey: string,\n  {\n    options,\n    cookieOptions\n  }: {\n    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n    cookieOptions?: CookieOptions;\n  } = {}\n): SupabaseClient<Database, SchemaName> {\n  if (!supabaseUrl || !supabaseKey) {\n    throw new Error(\n      'supabaseUrl and supabaseKey are required to create a Supabase client! Find these under `Settings` > `API` in your Supabase dashboard.'\n    );\n  }\n\n  return createBrowserSupabaseClient<Database, SchemaName>({\n    supabaseUrl,\n    supabaseKey,\n    options: {\n      ...options,\n      global: {\n        ...options?.global,\n        headers: {\n          ...options?.global?.headers,\n          'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n        }\n      }\n    },\n    cookieOptions\n  });\n}\n\nexport function createServerClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>(\n  supabaseUrl: string,\n  supabaseKey: string,\n  {\n    request,\n    response,\n    options,\n    cookieOptions\n  }: {\n    request: Request;\n    response: Response;\n    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n    cookieOptions?: CookieOptions;\n  }\n): SupabaseClient<Database, SchemaName> {\n  if (!supabaseUrl || !supabaseKey) {\n    throw new Error(\n      'supabaseUrl and supabaseKey are required to create a Supabase client! Find these under `Settings` > `API` in your Supabase dashboard.'\n    );\n  }\n\n  if (!request || !response) {\n    throw new Error(\n      'request and response must be passed to createSupabaseClient function, when called from loader or action'\n    );\n  }\n\n  return createServerSupabaseClient<Database, SchemaName>({\n    supabaseUrl,\n    supabaseKey,\n    getRequestHeader: (key) => {\n      return request.headers.get(key) ?? undefined;\n    },\n    getCookie: (name) => {\n      return parseCookies(request?.headers?.get('Cookie') ?? '')[name];\n    },\n    setCookie(name, value, options) {\n      const cookieStr = serializeCookie(name, value, {\n        ...options,\n        // Allow supabase-js on the client to read the cookie as well\n        httpOnly: false\n      });\n      response.headers.set('set-cookie', cookieStr);\n    },\n    options: {\n      ...options,\n      global: {\n        ...options?.global,\n        headers: {\n          ...options?.global?.headers,\n          'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n        }\n      }\n    },\n    cookieOptions\n  });\n}\n","const dev = process.env.NODE_ENV !== 'production';\n\nconst logger = {\n  log: (message?: any, ...optionalParams: any[]) => {\n    dev ? console.log(message, ...optionalParams) : null;\n  },\n  error: (message?: any, ...optionalParams: any[]) => {\n    console.error(message, ...optionalParams);\n  },\n  info: (message?: any, ...optionalParams: any[]) => {\n    logger.log(message, ...optionalParams);\n  },\n  debug: (message?: any, ...optionalParams: any[]) => {\n    logger.log(message, ...optionalParams);\n  },\n  warn: (message?: any, ...optionalParams: any[]) => {\n    dev ? logger.error(message, ...optionalParams) : null;\n  }\n};\n\nexport default logger;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,iCAOO;AA+EA,SAAS,oBAMd,aACA,aACA;AAAA,EACE;AAAA,EACA;AACF,IAGI,CAAC,GACiC;AArGxC;AAsGE,MAAI,CAAC,eAAe,CAAC,aAAa;AAChC,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,aAAO,wDAAkD;AAAA,IACvD;AAAA,IACA;AAAA,IACA,SAAS;AAAA,MACP,GAAG;AAAA,MACH,QAAQ;AAAA,QACN,GAAG,mCAAS;AAAA,QACZ,SAAS;AAAA,UACP,IAAG,wCAAS,WAAT,mBAAiB;AAAA,UACpB,iBAAiB,GAAG,kCAAgB;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAEO,SAAS,mBAMd,aACA,aACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAMsC;AAhJxC;AAiJE,MAAI,CAAC,eAAe,CAAC,aAAa;AAChC,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,WAAW,CAAC,UAAU;AACzB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,aAAO,uDAAiD;AAAA,IACtD;AAAA,IACA;AAAA,IACA,kBAAkB,CAAC,QAAQ;AACzB,aAAO,QAAQ,QAAQ,IAAI,GAAG,KAAK;AAAA,IACrC;AAAA,IACA,WAAW,CAAC,SAAS;AAnKzB,UAAAA;AAoKM,iBAAO,2CAAaA,MAAA,mCAAS,YAAT,gBAAAA,IAAkB,IAAI,cAAa,EAAE,EAAE;AAAA,IAC7D;AAAA,IACA,UAAU,MAAM,OAAOC,UAAS;AAC9B,YAAM,gBAAY,4CAAgB,MAAM,OAAO;AAAA,QAC7C,GAAGA;AAAA,QAEH,UAAU;AAAA,MACZ,CAAC;AACD,eAAS,QAAQ,IAAI,cAAc,SAAS;AAAA,IAC9C;AAAA,IACA,SAAS;AAAA,MACP,GAAG;AAAA,MACH,QAAQ;AAAA,QACN,GAAG,mCAAS;AAAA,QACZ,SAAS;AAAA,UACP,IAAG,wCAAS,WAAT,mBAAiB;AAAA,UACpB,iBAAiB,GAAG,kCAAgB;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,EACF,CAAC;AACH;;;AC1LA,IAAM,MAAM,QAAQ,IAAI,aAAa;AAErC,IAAM,SAAS;AAAA,EACb,KAAK,CAAC,YAAkB,mBAA0B;AAChD,UAAM,QAAQ,IAAI,SAAS,GAAG,cAAc,IAAI;AAAA,EAClD;AAAA,EACA,OAAO,CAAC,YAAkB,mBAA0B;AAClD,YAAQ,MAAM,SAAS,GAAG,cAAc;AAAA,EAC1C;AAAA,EACA,MAAM,CAAC,YAAkB,mBAA0B;AACjD,WAAO,IAAI,SAAS,GAAG,cAAc;AAAA,EACvC;AAAA,EACA,OAAO,CAAC,YAAkB,mBAA0B;AAClD,WAAO,IAAI,SAAS,GAAG,cAAc;AAAA,EACvC;AAAA,EACA,MAAM,CAAC,YAAkB,mBAA0B;AACjD,UAAM,OAAO,MAAM,SAAS,GAAG,cAAc,IAAI;AAAA,EACnD;AACF;AAEA,IAAO,cAAQ;","names":["_a","options"]}